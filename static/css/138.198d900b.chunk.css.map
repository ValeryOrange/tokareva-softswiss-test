{"version":3,"file":"static/css/138.198d900b.chunk.css","mappings":"AAIA,MAKI,uBAMA,wBACA,4BAFA,sBADA,mBARA,2BACA,aACA,sBACA,yBAGA,iBACA,eAFA,UAMA,CAEA,aAEI,mCCNY,CDUhB,4BAHI,gBAFA,oBCLY,CDUhB,eAEI,mCCZY,CDgBhB,WACI,sBElBA,yBFwBJ,MACI,eAEA,aACI,mBAGJ,WAGI,iBADA,YADA,WAEA","sources":["components/Card/card.scss","styles/_variables.scss","styles/_breakpoints.scss"],"sourcesContent":["\n                    @use 'src/styles/breakpoints.scss' as *;\n                    @use 'src/styles/variables.scss' as *;\n                \n.card {\n    container-type: inline-size;\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-end;\n    align-items: flex-start;\n    width: 100%;\n    min-height: 350px;\n    padding: 2.4rem;\n    border-radius: 1rem;\n    background-size: cover;\n    background-position: center;\n    background-repeat: no-repeat;\n\n    &__title {\n        margin-bottom: 2.4rem;\n        font-size: clamp(4rem, 6.5cqi, 7.4rem);\n        font-weight: $font-weight-super;\n    }\n\n    &__caption {\n        margin-bottom: 2.4rem;\n        font-size: clamp(1.6rem, 4cqi, 2.6rem);\n        font-weight: $font-weight-super;\n    }\n\n    &__btn {\n        align-self: flex-start;\n    }\n}\n\n// The @include respond(lg) mixin applies styles for large screens\n@include respond(lg) {\n    .card {\n        padding: 3.4rem;\n\n        &__title {\n            margin-bottom: 3rem;\n        }\n\n        &__btn {\n            width: 190px;\n            height: 54px;\n            font-size: 2.2rem;\n        }\n    }\n}\n","// base colors\n$white: #fff;\n$white-transparent: rgba(255, 255, 255, 0.6);\n$black: #000;\n$black-transparent: rgba(0, 0, 0, 0);\n$grey-transparent: rgba(15, 20, 32, 0.79);\n$blue: #304571;\n$yellow: #ebff00;\n$yellow-transparent: rgba(235, 255, 0, 0.6);\n$pink: #ff70d9;\n\n// font-weight\n$font-weight-regular: 400;\n$font-weight-bold: 700;\n$font-weight-super: 800;\n\n//special\n$header-height-sm: 48px;\n","$breakpoints: (\n    sm: 360px,\n    md: 768px,\n    lg: 1240px,\n);\n\n// Mixin to generate media queries based on defined breakpoints\n// Usage:\n// @include respond(sm) { ... }\n// @include respond(md) { ... }\n// @include respond(lg) { ... }\n@mixin respond($breakpoint) {\n    @if map-has-key($breakpoints, $breakpoint) {\n        @media (min-width: map-get($breakpoints, $breakpoint)) {\n            @content;\n        }\n    }\n}\n"],"names":[],"sourceRoot":""}